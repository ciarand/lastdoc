local c = require "header"

describe("the heading parsing stuff", function()
    describe("the headerNode func", function()
        it("should return a table w/ title field + default level of 1", function()
            assert.is.same({title = "title", level = 1}, c.headerNode("title"))
        end)
        it("should allow custom levels up to 6", function()
            assert.is.same({title = "title", level = 2}, c.headerNode("title", 2))
            assert.is.same({title = "title", level = 3}, c.headerNode("title", 3))
            assert.is.same({title = "title", level = 4}, c.headerNode("title", 4))
            assert.is.same({title = "title", level = 5}, c.headerNode("title", 5))
            assert.is.same({title = "title", level = 6}, c.headerNode("title", 6))
        end)
        it("should floor all levels past 6 to 6", function()
            assert.is.same({title = "title", level = 6}, c.headerNode("title", 7))
            assert.is.same({title = "title", level = 6}, c.headerNode("title", 17))
            assert.is.same({title = "title", level = 6}, c.headerNode("title", 99))
        end)

    end)

    describe("the parseNode func", function()
        it("should parse a doc with a normal header", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("title\n====="))
        end)
        it("should parse a doc with a normal header - 1", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("title\n===="))
        end)
        it("should parse a doc with a normal header - 2", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("title\n==="))
        end)
        it("should parse a doc with a normal header + 1", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("title\n======"))
        end)
        it("should parse a doc with a normal header + 2", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("title\n======="))
        end)

        -- not implemented yet
        pending("should not parse a doc with a normal header - 3", function()
            assert.is_not.same(c.headerNode("title"), c.parseHeaderNode("title\n=="))
        end)
        pending("should not parse a doc with a normal header + 3", function()
            assert.is_not.same(c.headerNode("title"), c.parseHeaderNode("title\n========"))
        end)
        pending("should parse a one-line header with no right delim", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("= title"))
        end)
        pending("should parse a one-line header with a right delim", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("= title ="))
        end)
        pending("should parse a one-line header with no right delim and no left ws", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("=title"))
        end)
        pending("should parse a one-line header with a right delim and no left ws", function()
            assert.is.same(c.headerNode("title"), c.parseHeaderNode("=title ="))
        end)
    end)
end)
