local doc = require "lastdoc"

local title = function(str)
    return doc.title(doc.gen(str))
end

describe("the heading parsing stuff", function()
    describe("totally incorrect doc", function()
        it("should not parse an empty string", function()
            assert.falsy(nil, title(""))
        end)

        it("should not parse a regular string", function()
            assert.falsy(nil, title("foobar"))
        end)

        it("should not parse a regular string with equals signs in it", function()
            assert.falsy(nil, title("foobar ===="))
        end)
    end)

    describe("correct normal headers", function()
        it("should parse a doc with a normal header", function()
            assert.is.same("lastdoc", title("lastdoc\n=======\n"))
            assert.is.same("lastdoc", title("lastdoc\n======="))
        end)
        it("should parse a doc with a normal header - 1", function()
            assert.is.same("lastdoc", title("lastdoc\n======\n"))
            assert.is.same("lastdoc", title("lastdoc\n======"))
        end)
        it("should parse a doc with a normal header - 2", function()
            assert.is.same("lastdoc", title("lastdoc\n=====\n"))
            assert.is.same("lastdoc", title("lastdoc\n====="))
        end)
        it("should parse a doc with a normal header + 1", function()
            assert.is.same("lastdoc", title("lastdoc\n========\n"))
            assert.is.same("lastdoc", title("lastdoc\n========"))
        end)
        it("should parse a doc with a normal header + 2", function()
            assert.is.same("lastdoc", title("lastdoc\n=========\n"))
            assert.is.same("lastdoc", title("lastdoc\n========="))
        end)
    end)

    describe("incorrect normal headers", function()
        it("should NOT parse a doc with a normal header - 3", function()
            assert.is_not.same("lastdoc", title("lastdoc\n====\n"))
            assert.is_not.same("lastdoc", title("lastdoc\n===="))
        end)
        it("should NOT parse a doc with a normal header + 3", function()
            assert.is_not.same("lastdoc", title("lastdoc\n==========\n"))
            assert.is_not.same("lastdoc", title("lastdoc\n=========="))
        end)
        it("should NOT parse a doc underlined with something other than equals signs", function()
            assert.is_not.same("lastdoc", title("lastdoc\n-------\n"))
            assert.is_not.same("lastdoc", title("lastdoc\n-------"))

            assert.is_not.same("lastdoc", title("lastdoc\n~~~~~~~\n"))
            assert.is_not.same("lastdoc", title("lastdoc\n~~~~~~~"))

            assert.is_not.same("lastdoc", title("lastdoc\n_______\n"))
            assert.is_not.same("lastdoc", title("lastdoc\n_______"))
        end)
    end)

    describe("one-line headers", function()
        it("should parse a one-line header with no right delim", function()
            assert.is.same("lastdoc", title("= lastdoc"))
        end)
        it("should parse a one-line header with a right delim", function()
            assert.is.same("lastdoc", title("= lastdoc ="))
        end)
        it("should parse a one-line header with no right delim and no left ws", function()
            assert.is.same("lastdoc", title("=lastdoc"))
        end)
        it("should parse a one-line header with a right delim and no left ws", function()
            assert.is.same("lastdoc", title("=lastdoc ="))
        end)
    end)
end)
